[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Name Survey",
    "section": "",
    "text": "1 Processing data\nThe file ProcessData.R contains the code for processing the data, which involved the following steps:",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Processing data</span>"
    ]
  },
  {
    "objectID": "index.html#final-dataset",
    "href": "index.html#final-dataset",
    "title": "Name Survey",
    "section": "1.1 Final dataset",
    "text": "1.1 Final dataset\nThe code below reads the exported dataset in RDS format. The SPSS .sav and STATA .dat files are also available on pCloud.\n\n\nCode\n# Import packages and working dataset\nsource(\"WorkingDF.R\")\n\n\nTable 1.1 shows the total number of observations (tests) for each country as well as the number of names tested.\n\n\nCode\ndf_es |&gt; \n    group_by(country_survey) |&gt;\n    summarise(Names = n_distinct(Name),\n              Tests = n()) |&gt;\n    gt()\n\n\n\n\nTable 1.1: Total number of distinct names tested and tests by country\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nNames\nTests\n\n\n\n\nBelgium\n112\n8000\n\n\nCzech Republic\n32\n6400\n\n\nGermany\n133\n8990\n\n\nHungary\n40\n3000\n\n\nIreland\n131\n9000\n\n\nSpain\n144\n5120\n\n\nSwitzerland\n180\n24000\n\n\nThe Netherlands\n151\n10300\n\n\nUK\n155\n10290",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Processing data</span>"
    ]
  },
  {
    "objectID": "quality.html",
    "href": "quality.html",
    "title": "2  Quality checks",
    "section": "",
    "text": "2.1 Repetition\nCode\ndf_es |&gt;\n  mutate(\n    Sex_DK = if_else(as.numeric(V001a) == 4, 1, 0),\n    Region_DK = if_else(as.numeric(V001b) == 9, 1, 0),\n    Religion_DK = if_else(as.numeric(V001e) == 7, 1, 0),\n    Skin_DK = if_else(round == 2 & as.numeric(V001db) == 11, 1, 0)) |&gt;\n  group_by(country_survey, id) |&gt;\n  summarise(across(ends_with(\"DK\"), mean),.groups = 'drop') |&gt;\n  group_by(country_survey) |&gt;\n  summarise(across(ends_with(\"DK\"), ~sum(.x == 1)), .groups = 'drop') |&gt;\n  gt() |&gt;\n  cols_label_with(fn =  ~str_remove(., \"_DK\"))\n\n\n\n\nTable 2.1: Absolute number of respondents who answered “Don’t know” for all 10 names.\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nSex\nRegion\nReligion\nSkin\n\n\n\n\nBelgium\n5\n14\n55\n7\n\n\nCzech Republic\n0\nNA\n29\n3\n\n\nGermany\n1\n10\n42\n9\n\n\nHungary\n0\nNA\n20\n3\n\n\nIreland\n0\n6\n24\n1\n\n\nSpain\n0\n0\n0\nNA\n\n\nSwitzerland\n1\n28\n103\n28\n\n\nThe Netherlands\n2\n13\n52\n12\n\n\nUK\n5\n36\n73\n24\nCode\ndf_es |&gt;\n  group_by(country_survey, id) |&gt;\n  summarise(across(c(\"V001a\", \"V001b\", \"V001e\"), n_distinct),.groups = 'drop') |&gt;\n  group_by(country_survey) |&gt;\n  summarise(across(c(\"V001a\", \"V001b\", \"V001e\"), ~sum(.x == 1)), .groups = 'drop') |&gt;\n  gt() |&gt;\n  cols_label(V001a = \"Sex\", V001b = \"Region\", V001e = \"Religion\")\n\n\n\n\nTable 2.2: Absolute number of respondents who repeated the same answer for all 10 names.\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nSex\nRegion\nReligion\n\n\n\n\nBelgium\n7\n14\n57\n\n\nCzech Republic\n1\n640\n89\n\n\nGermany\n6\n10\n45\n\n\nHungary\n0\n300\n78\n\n\nIreland\n6\n7\n26\n\n\nSpain\n0\n0\n0\n\n\nSwitzerland\n19\n30\n110\n\n\nThe Netherlands\n5\n13\n53\n\n\nUK\n9\n38\n74",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quality checks</span>"
    ]
  },
  {
    "objectID": "quality.html#demographics",
    "href": "quality.html#demographics",
    "title": "2  Quality checks",
    "section": "2.2 Demographics",
    "text": "2.2 Demographics\nHere we check the difference in response pattern based on the respondent’s demographic variables. The table below show the average region congruence rates for Nigerian names.\n\n\nCode\ndf_es &lt;- \n  df_es |&gt;\n  mutate(resp_sex = case_match(VS1, 1 ~ \"Male\", 2 ~ \"Female\", .default = NA),\n          resp_edu = case_match(VS3, 1 ~ \"No higher\", 2 ~ \"Higher\", .default = NA),\n          resp_age = case_when(VS2 &lt; 25 ~ \"18-24\", VS2 &gt; 24 & VS2 &lt; 46 ~ \"25-45\", VS2 &gt; 45 ~ \"46+\")) \n\ncompare_cong &lt;- function(country, group_comp){\n  df_es |&gt; \n    filter(country_name == country) |&gt;\n    group_by(country_survey, Name, group = get(group_comp)) |&gt;\n    summarise(region = get_mean(cong_region, Weging), .groups = 'drop') |&gt;\n    filter(!is.na(group)) |&gt;\n    group_by(country_survey, group) |&gt;\n    summarise(mean = mean(region), .groups = 'drop') |&gt;\n    pivot_wider(names_from = group, values_from = mean)\n}\n\ncompare_cong(\"Nigeria\", \"resp_sex\") |&gt;\n  left_join(compare_cong(\"Nigeria\", \"resp_edu\")) |&gt;\n  left_join(compare_cong(\"Nigeria\", \"resp_age\")) |&gt;\ngt() |&gt; \nfmt_percent(decimals = 0) |&gt;\nsub_missing() |&gt;\ntab_spanner(label = \"Sex\", columns = c(\"Female\", \"Male\")) |&gt;\ntab_spanner(label = \"Education\", columns = c(\"Higher\", \"No higher\")) |&gt;\ntab_spanner(label = \"Age group\", columns = c(\"18-24\", \"25-45\", \"46+\"))\n\n\n\n\nTable 2.3: Average region congruence rate for Nigerian names by country and respondent’s characteristics.\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nSex\nEducation\nAge group\n\n\nFemale\nMale\nHigher\nNo higher\n18-24\n25-45\n46+\n\n\n\n\nBelgium\n14%\n21%\n20%\n19%\n14%\n18%\n19%\n\n\nGermany\n31%\n36%\n31%\n37%\n24%\n33%\n35%\n\n\nIreland\n29%\n37%\n26%\n33%\n28%\n33%\n34%\n\n\nSpain\n7%\n17%\n11%\n13%\n11%\n9%\n15%\n\n\nSwitzerland\n32%\n36%\n36%\n33%\n34%\n36%\n33%\n\n\nThe Netherlands\n27%\n31%\n23%\n26%\n21%\n32%\n30%\n\n\nUK\n34%\n39%\n32%\n27%\n22%\n35%\n40%",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quality checks</span>"
    ]
  },
  {
    "objectID": "quality.html#time",
    "href": "quality.html#time",
    "title": "2  Quality checks",
    "section": "2.3 Time",
    "text": "2.3 Time\n\n\n\n\n\n\nImportant\n\n\n\nThe results below are based on data from the second round only and exclude 781 observations for which time is higher than 300 seconds.\n\n\n\n\nCode\ndf_es |&gt;\n  filter(!is.na(Filltime) & Filltime &lt; 300) |&gt;\n  group_by(country_survey, region_es, id) |&gt;\n  summarise(time_id = mean(Filltime), .groups = 'drop') |&gt;\n  group_by(country_survey, region_es) |&gt;\n  summarise(mean = mean(time_id), median = median(time_id),\n            .groups = \"drop\") |&gt;\n  gt()  |&gt;\n  fmt_number(decimals = 2) |&gt;\n  opt_interactive(use_filters = TRUE, use_page_size_select = TRUE)\n\n\n\n\nTable 2.4: Mean value of time (in seconds) spent per name for each group\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndf_es |&gt;\n  filter(!is.na(Filltime) & Filltime &lt; 300) |&gt;\n  ggplot(aes(x = Filltime)) +\n  geom_histogram(bins =  100) +\n  facet_wrap(~country_survey) +\n  theme_classic()\n\n\n\n\n\n\n\n\nFigure 2.1: Distribution of time spent for each name\n\n\n\n\n\n\n\nCode\ndf_es |&gt;\n  filter(!is.na(Filltime) & Filltime &lt; 300) |&gt;\n  group_by(country_survey, id) |&gt;\n  summarise(time_id = mean(Filltime), .groups = 'drop') |&gt;\n  group_by(country_survey) |&gt;\n  summarise(less_30 = sum(if_else(time_id &lt; 30, 1, 0)),\n            less_45 = sum(if_else(time_id &lt; 45, 1, 0))) |&gt;\n  gt()\n\n\n\n\nTable 2.5: Number of respondents who, on average, took less than 30 / 45 seconds to complete a name\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nless_30\nless_45\n\n\n\n\nBelgium\n34\n163\n\n\nCzech Republic\n22\n109\n\n\nGermany\n21\n127\n\n\nHungary\n10\n62\n\n\nIreland\n28\n188\n\n\nSwitzerland\n36\n238\n\n\nThe Netherlands\n35\n217\n\n\nUK\n24\n82",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Quality checks</span>"
    ]
  },
  {
    "objectID": "selection.html",
    "href": "selection.html",
    "title": "3  Name selection",
    "section": "",
    "text": "3.1 Congruence rates\nCode\n# Function to get congruence rates for different variables for all countries\nget_cong_all &lt;- function(...){\n    # creates a vector with variables assigned in the input\n    selected_vars &lt;- c(...)\n    # creates a table with cong. rates for these varuables\n    df_es |&gt;\n        group_by(country_survey, Name) |&gt;\n        summarise(across(all_of(selected_vars), ~get_mean(., Weging)), .groups = 'drop') |&gt;\n        group_by(country_survey) |&gt;\n        summarise(across(all_of(selected_vars), ~mean(.x, na.rm = T)), .groups = 'drop') |&gt;\n        gt() |&gt; \n        fmt_percent(decimals = 0) |&gt;\n        sub_missing()\n}\nThe Table 3.1 shows the mean congruence rate of each name by country. Congruence rate is defined as the proportion of responses that selected the expected alternative for each name. For instance, for the name ‘John’, the Sex Congruence Rate is the proportion of responses that selected “Male” among all responses (including ‘Don’t Know’).\nCode\nget_cong_all(\"cong_sex\", \"cong_region\", \"cong_religion\", \"skin_adj\") |&gt;\n    cols_label_with(fn =  ~str_remove(., \"cong_\"))\n\n\n\n\nTable 3.1: Mean congruence rate by surveyed country\n\n\n\n\n\n\n\n\n\n\ncountry_survey\nsex\nregion\nreligion\nskin_adj\n\n\n\n\nBelgium\n80%\n48%\n37%\n50%\n\n\nCzech Republic\n95%\n—\n—\n37%\n\n\nGermany\n76%\n49%\n44%\n45%\n\n\nHungary\n95%\n—\n—\n34%\n\n\nIreland\n73%\n46%\n46%\n47%\n\n\nSpain\n80%\n47%\n46%\n50%\n\n\nSwitzerland\n77%\n55%\n48%\n43%\n\n\nThe Netherlands\n77%\n43%\n30%\n46%\n\n\nUK\n75%\n40%\n34%\n50%",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Name selection</span>"
    ]
  },
  {
    "objectID": "selection.html#congruence-rates",
    "href": "selection.html#congruence-rates",
    "title": "3  Name selection",
    "section": "",
    "text": "Important\n\n\n\nThe country congruence rate includes missing values in the denominator. For example, if the respondent selected the region “Northern and Western Europe” for a Nigerian name, the country Nigeria is not listed in the following screen. However, regardless of the selection made for country, this observation is included in the calculation as “not congruent”.",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Name selection</span>"
    ]
  },
  {
    "objectID": "selection.html#multiple-countries",
    "href": "selection.html#multiple-countries",
    "title": "3  Name selection",
    "section": "3.2 Multiple countries",
    "text": "3.2 Multiple countries\n\n\nCode\nget_cong_all(\"cong_n_countries\") |&gt; fmt_number()\n\n\n\n\nTable 3.2: Average number of countries selected for each name (mean of means) by country\n\n\n\n\n\n\n\n\n\n\ncountry_survey\ncong_n_countries\n\n\n\n\nBelgium\n1.23\n\n\nCzech Republic\n1.12\n\n\nGermany\n1.20\n\n\nHungary\n1.26\n\n\nIreland\n1.30\n\n\nSpain\n1.27\n\n\nSwitzerland\n1.33\n\n\nThe Netherlands\n1.25\n\n\nUK\n1.16",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Name selection</span>"
    ]
  },
  {
    "objectID": "selection.html#common-names",
    "href": "selection.html#common-names",
    "title": "3  Name selection",
    "section": "3.3 Common names",
    "text": "3.3 Common names\nAverage congruence rates for names that were tested across six countries.\n\n\nCode\ncommon_names &lt;- \n  df_es |&gt;\n      group_by(Name) |&gt;\n      summarise(n = n_distinct(country_survey)) |&gt;\n      filter(n &gt; 5) |&gt;\n      pull(Name)\n\ncn_variables &lt;- c(\"cong_sex\",\"cong_country\", \"cong_religion\", \"skin_adj\", \"ladder_adj\")\n\ndf_es |&gt;\n  filter(Name %in% common_names) |&gt;\n  group_by(country_survey, country_name, Name) |&gt;\n  summarise(across(all_of(cn_variables), ~get_mean(., Weging)), .groups = 'drop') |&gt;\n  group_by(country_name, Name) |&gt;\n  summarise(across(all_of(cn_variables), mean), .groups = 'drop') |&gt;\n  gt() |&gt; \n  fmt_percent(decimals = 0) |&gt;\n  sub_missing() |&gt;\n  cols_label_with(fn =  ~str_remove(., \"cong_|_adj\")) |&gt;\n  opt_interactive(use_filters = TRUE, use_page_size_select = TRUE)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Name selection</span>"
    ]
  },
  {
    "objectID": "selection.html#selected-names",
    "href": "selection.html#selected-names",
    "title": "3  Name selection",
    "section": "3.4 Selected names",
    "text": "3.4 Selected names\nWe use a composite score to select names. This composite score is calculated for each name as the weighted mean value of these variables:\n\nMENAP names: CONGRUENCE SEX / CONGRUENCE RELIGION\nSSA names: CONGRUENCE SEX / SKIN COLOUR\nNames in CZ and HU: CONGRUENCE SEX / CONGRUENCE ETHNICITY\nMajority names: CONGRUENCE SEX / CONGRUENCE COUNTRY\n\n\n\nCode\n# Limit of names per gender/country\nname_lim &lt;- 2\n\ntb_selected &lt;- \n    df_es |&gt; \n      group_by(country_survey, region_es, country_name, sex, Name) |&gt;\n      summarise(across(all_of(c(\"score\", \"rank\", \"cong_sex\", \"cong_religion\", \n                                \"cong_ethn\", \"skin_adj\", \"cong_country\")),\n                        ~get_mean(., Weging)), .groups = 'drop')\n\nplot_select &lt;- function(myregion, myvar, name_lim){\n\n  plot &lt;- \n    tb_selected |&gt; \n      filter(region_es == myregion) |&gt;\n      mutate(selected = if_else(rank &lt;= name_lim, \"Selected\", \"Not selected\")) |&gt;\n      ggplot(aes(x = cong_sex, y = get(myvar), color = selected, label = Name))+\n      geom_point(alpha = 0.6) +\n      facet_wrap(~country_survey) +\n      theme_classic() +\n      labs(x = \"Congruence for Gender\",\n           y = paste(\"Congruence for \", myregion, \" relevant variable\"))\n\nggplotly(plot)\n\n}\n\n\n\n3.4.1 SSA\nThis plot shows the congruence for Gender and congruence for Skin Colour (relevant variable for SSA) by name and country. The size represents congruence for region and the colours show which names were selected using the top 2 names with the highest composite scores.\n\n\n\n\n\n\nWarning\n\n\n\nThe scores below use the skin colour data for round 2 only, with the following scale:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nplot_select(\"SSA\", \"skin_adj\", name_lim)\n\n\n\n\n\n\n\n\nFigure 3.1: SSA selected names and their respective gender/skin colour rates\n\n\n\n\n\n\n3.4.2 MENAP\n\n\nCode\nplot_select(\"MENAP\", \"cong_religion\", name_lim)\n\n\n\n\n\n\n\n\nFigure 3.2: MENAP selected names and their respective gender/religion congruence rates\n\n\n\n\n\n\n3.4.3 Majority\n\n\nCode\nplot_select(\"Majority\", \"cong_country\", name_lim)\n\n\n\n\n\n\n\n\nFigure 3.3: Majority selected names and their respective gender/country congruence rates\n\n\n\n\n\n\n3.4.4 Ethnicity\n\n\nCode\nplot_select(\"Other\", \"cong_ethn\", name_lim)\n\n\n\n\n\n\n\n\nFigure 3.4: Selected names in Czech Republic, Hungary, and Spain and their respective gender/ethnicity congruence rates\n\n\n\n\n\n\n3.4.5 Full table\n\n\nCode\ntb_selected |&gt;\n  filter(rank &lt;= name_lim) |&gt;\n  gt() |&gt;\n  fmt_percent(columns = c(\"cong_sex\", \"cong_religion\", \"cong_country\"), decimals = 0) |&gt;\n  fmt_number(columns = c(\"score\", \"skin_adj\"), decimals = 2) |&gt;\n  opt_interactive(use_filters = TRUE, use_page_size_select = TRUE)\n\n\n\n\nTable 3.3: All selected names by country",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Name selection</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "4  Results by country",
    "section": "",
    "text": "5 Results by country\nCode\n# Function to get congruence rates for specific variables and countries\nget_rank &lt;- function(country, ...){\n\n    selected_vars &lt;- c(...)\n\n    tb_country &lt;- \n      df_es |&gt;\n        group_by(country_survey, country_name, Name) |&gt;\n        summarise(across(all_of(selected_vars), ~get_mean(., Weging)), .groups = 'drop') |&gt;\n        filter(country_survey == country) |&gt;\n        arrange(country_name, rank)\n\n    openxlsx::write.xlsx(tb_country, file = paste0(\"./data/rankings/\", country, \".xlsx\"))\n\n    gt(tb_country) |&gt; \n      fmt_percent(decimals = 0) |&gt;\n      fmt_number(columns = rank, decimals = 0) |&gt;\n      fmt_number(columns = score, decimals = 2) |&gt;\n      sub_missing() |&gt;\n      cols_label_with(fn =  ~str_remove(., \"cong_|_adj\")) |&gt;\n      opt_interactive(use_filters = TRUE, use_page_size_select = TRUE)\n  }\n\ncountry_variables &lt;- c(\"rank\", \"score\", \"cong_sex\", \"cong_religion\", \"skin_adj\", \"cong_country\", \"cong_region\", \"ladder_adj\", \"cong_ethn\")",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#belgium",
    "href": "results.html#belgium",
    "title": "4  Results by country",
    "section": "5.1 Belgium",
    "text": "5.1 Belgium\n\n\nCode\nget_rank(\"Belgium\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#czech-republic",
    "href": "results.html#czech-republic",
    "title": "4  Results by country",
    "section": "5.2 Czech Republic",
    "text": "5.2 Czech Republic\n\n\nCode\nget_rank(\"Czech Republic\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#germany",
    "href": "results.html#germany",
    "title": "4  Results by country",
    "section": "5.3 Germany",
    "text": "5.3 Germany\n\n\nCode\nget_rank(\"Germany\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#hungary",
    "href": "results.html#hungary",
    "title": "4  Results by country",
    "section": "5.4 Hungary",
    "text": "5.4 Hungary\n\n\nCode\nget_rank(\"Hungary\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#ireland",
    "href": "results.html#ireland",
    "title": "4  Results by country",
    "section": "5.5 Ireland",
    "text": "5.5 Ireland\n\n\nCode\nget_rank(\"Ireland\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#netherlands",
    "href": "results.html#netherlands",
    "title": "4  Results by country",
    "section": "5.6 Netherlands",
    "text": "5.6 Netherlands\n\n\nCode\nget_rank(\"The Netherlands\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#spain",
    "href": "results.html#spain",
    "title": "4  Results by country",
    "section": "5.7 Spain",
    "text": "5.7 Spain\n\n\nCode\nget_rank(\"Spain\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#switzerland",
    "href": "results.html#switzerland",
    "title": "4  Results by country",
    "section": "5.8 Switzerland",
    "text": "5.8 Switzerland\n\n\nCode\nget_rank(\"Switzerland\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  },
  {
    "objectID": "results.html#uk",
    "href": "results.html#uk",
    "title": "4  Results by country",
    "section": "5.9 UK",
    "text": "5.9 UK\n\n\nCode\nget_rank(\"UK\", country_variables)",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Results by country</span>"
    ]
  }
]